[gd_scene load_steps=8 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode specular_toon;

uniform float height_scale = 0.3;
uniform sampler2D noise;
uniform sampler2D normalmap;

varying vec2 tex_position;

float wave(vec2 pos){
	pos += texture(noise, pos/10.0).x * 2.0 - 1.0;
	vec2 wv = abs(sin(pos));
	return pow(1.0 - pow(wv.x*wv.y, 0.65), 4.0);
}

float height(vec2 pos, float t){
  float time = 0.2 * t;
  float d = wave((pos + time) * 0.4) * 0.3;
  d += wave((pos - time) * 0.3) * 0.3;
  d += wave((pos + time) * 0.5) * 0.2;
  d += wave((pos - time) * 0.6) * 0.2;
  return d;
}

void vertex() {
 vec2 pos = VERTEX.xz;
 float k = height(pos, TIME);
 VERTEX.y = k * height_scale;
 NORMAL = normalize(vec3(k - height(pos + vec2(0.1, 0.0), TIME), 0.1, k - height(pos + vec2(0.0, 0.1), TIME)));
}

void fragment() {
 float fresnel = sqrt(1.0 - dot(NORMAL, VIEW));
 RIM = 0.2;
 METALLIC = 0.0;
 ROUGHNESS = 0.1 * (1.0 - fresnel);
 ALBEDO = vec3(0.01, 0.03, 0.05) + (0.1 * fresnel);
}

"

[sub_resource type="OpenSimplexNoise" id=4]

[sub_resource type="NoiseTexture" id=5]
width = 1024
height = 1024
noise = SubResource( 4 )

[sub_resource type="OpenSimplexNoise" id=6]

[sub_resource type="NoiseTexture" id=7]
width = 1024
height = 1024
noise = SubResource( 6 )

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/height_scale = 0.3
shader_param/noise = SubResource( 5 )
shader_param/normalmap = SubResource( 7 )

[sub_resource type="PlaneMesh" id=3]
material = SubResource( 2 )
size = Vector2( 4, 4 )
subdivide_width = 128
subdivide_depth = 128

[node name="Mesh" type="MeshInstance"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.159225, 0 )
mesh = SubResource( 3 )
material/0 = null
